@using System.Text.Json
@model GlobalBankingApp.Models.BankDetailsViewModel
@{
    ViewData["Title"] = "Banking Details";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link href="~/css/Site.css" rel="stylesheet" type="text/css" />
    <link href="~/css/Home.css" rel="stylesheet" type="text/css" />
</head>
<body>
    <div class="container">
        <div class="header">
</div>
        <div id="welcome-section">
            <h4>Welcome, @Model.AccountHolderName!</h4>
            <a href="@Url.Action("Logout", "Home")" class="logout-link">Logout</a>
        </div>
        

        <div id="account-section">
            <div class="account-info form-group">
                <label for="account">Account:</label>
                <select id="account" class="form-control">
                    @foreach (var item in Model.AccountNumber)
                    {
                        <option value="@item.Number">@item.Number</option>
                    }
                </select>
            </div>
            <div class="balance-info">
                <label>Balance:</label>
                <span class="balance-amount">$ <span id="balance-amount">@Model.AccountNumber.First().Balance</span> (CAD)</span>
            </div>
        </div>

        <!-- Error message display -->
        @if (!string.IsNullOrEmpty(ViewBag.ErrorMessage))
        {
            <div class="error-message" style="color: red; text-align: center; margin-bottom: 20px;">
                @ViewBag.ErrorMessage
            </div>
        }
        <div id="transaction-section">
            <form id="transaction-form" method="post" action="@Url.Action("UpdateAccount", "Home")">
                <div class="form-group">
                    <label for="amount">Amount:</label>
                    <div style="display: flex; justify-content: space-between;">
                        <input required type="number" id="amount" name="amount" class="form-control" style="margin-right: 1rem; " />
                        <select id="currency" name="currency" class="form-control">
                            <option value="CAD">CAD</option>
                            <option value="USD">USD</option>
                            <option value="MXN">MXN</option>
                            <option value="EURO">EURO</option>
                        </select>
                    </div>
                </div>
                <input type="hidden" id="accountNumber" name="accountNumber" value="@Model.AccountNumber.First().Number" />
                <input type="hidden" id="actionType" name="actionType" value="" />
                <div class="action-buttons">
                    <button type="button" class="btn btn-primary" onclick="submitForm('Withdraw')">Withdraw</button>
                    <button type="button" class="btn btn-success" onclick="submitForm('Deposit')">Deposit</button>
                </div>
            </form>
        </div>
    </div>


    <script>
        const accounts = @Html.Raw(JsonSerializer.Serialize(Model.AccountNumber));

        const accountEl = document.getElementById('account');

        accountEl.addEventListener('change', function () {
            const selectedAccountNumber = this.value;
            const account = accounts.find(acc => acc.Number == selectedAccountNumber);
            if (account) {
                document.getElementById('balance-amount').innerText = account.Balance.toFixed(2);
                document.getElementById('accountNumber').value = account.Number;
            }
        });


        // change value to Model.SelectedAccount only if it exists
        const selectedAccount = '@Model.SelectedAccount';
        let account;
        if (selectedAccount && selectedAccount !== "0") {
            accountEl.value = selectedAccount;
            account = accounts.find(acc => acc.Number == selectedAccount);
        } else {
            [account = 0] = accounts;
        }

        console.log(account);

        if (account) {
            document.getElementById('balance-amount').innerText = account.Balance.toFixed(2);
            document.getElementById('accountNumber').value = account.Number;
        }

        function submitForm(action) {
            const form = document.getElementById('transaction-form');
            document.getElementById('actionType').value = action;
            form.submit();
        }
    </script>
</body>
</html>
